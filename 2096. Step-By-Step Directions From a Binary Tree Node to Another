/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void rootToNode(TreeNode* root, int &n, int&m, string&s, string&d, string&temp){
        if(!root) return ;
        if(root->val == n) s=temp;
        if(root->val == m) d=temp;

        temp.push_back('L');
        rootToNode(root->left,n,m,s,d,temp);
        temp.pop_back();

        temp.push_back('R');
        rootToNode(root->right,n,m,s,d,temp);
        temp.pop_back();
    }
    string getDirections(TreeNode* root, int startValue, int destValue) {
        string s,d,temp;
        rootToNode(root,startValue, destValue,s,d,temp);
        int index = 0;
        
        for(int i=0;i<s.size() && i<d.size();i++){
            if(s[i]==d[i]) index = i+1;
            else break;
        }
        string ans;
        for(int i=index;i<s.size();i++){
            ans.push_back('U');
        }
        for(int i=index;i<d.size();i++){
            ans.push_back(d[i]);
        }
        return ans;
        
    }
};
