class UnionFind {
public:
    vector<int> parent, rank;
    UnionFind(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; ++i) {
            parent[i] = i;
        }
    }
    
    int find(int u) {
        if (parent[u] != u) {
            parent[u] = find(parent[u]);
        }
        return parent[u];
    }
    
    bool unionSets(int u, int v) {
        int pu = find(u);
        int pv = find(v);
        if (pu == pv) return false;
        if (rank[pu] < rank[pv]) {
            parent[pu] = pv;
        } else if (rank[pu] > rank[pv]) {
            parent[pv] = pu;
        } else {
            parent[pv] = pu;
            ++rank[pu];
        }
        return true;
    }
};

class Solution {
public:
    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {
        UnionFind ufA(n+1), ufB(n+1);
        int removals = 0;
        int commonEdges = 0;

        // First, use type 3 edges (common to both Alice and Bob)
        for (const auto& edge : edges) {
            if (edge[0] == 3) {
                if (ufA.unionSets(edge[1], edge[2])) {
                    ufB.unionSets(edge[1], edge[2]);
                    ++commonEdges;
                } else {
                    ++removals;
                }
            }
        }

        // Use type 1 edges (Alice only) and type 2 edges (Bob only)
        for (const auto& edge : edges) {
            if (edge[0] == 1) {
                if (!ufA.unionSets(edge[1], edge[2])) {
                    ++removals;
                }
            } else if (edge[0] == 2) {
                if (!ufB.unionSets(edge[1], edge[2])) {
                    ++removals;
                }
            }
        }

        // Check if both Alice and Bob can traverse the entire graph
        if (connected(ufA, n) && connected(ufB, n)) {
            return removals;
        }
        
        return -1;
    }

private:
    bool connected(UnionFind& uf, int n) {
        int root = uf.find(1);
        for (int i = 2; i <= n; ++i) {
            if (uf.find(i) != root) {
                return false;
            }
        }
        return true;
    }
};
