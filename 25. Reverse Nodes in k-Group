class Solution {
public:
int getLength(ListNode* head){
    int len=0;
    ListNode* temp= head;
    while(temp!= NULL){
        len++;
        temp = temp->next;
    }
    return len;
}
ListNode* reverse(ListNode* &head, int k , int len){
    //base case
    if(head==NULL || head->next==NULL || k==1 || len<k){
        return head;
    }
    //Step 1 : Reverse first k nodes
    ListNode* nxt = NULL;
    ListNode* curr = head;
    ListNode* prev = NULL;

    int count = 0;
    while(curr != NULL && count < k) {
        nxt = curr -> next;
        curr -> next = prev;
        prev = curr;
        curr = nxt;
        count++;
    }
    //Step 2 : Reverse next k nodes using recursion
    if(nxt != NULL) { 
        head -> next = reverse(nxt, k, (len - k));
    }
    //Step 3 : Return head of the reversed linked list
    return prev;
    }

ListNode* reverseKGroup(ListNode* head, int k) {
    int len = getLength(head);
    return reverse(head, k, len);
    }
};


