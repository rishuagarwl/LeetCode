/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<int> nodesBetweenCriticalPoints(ListNode* head) {
        if(head==NULL || head->next==NULL ||head->next->next==NULL) 
            return {-1, -1};
        ListNode*prev = NULL;
        ListNode*temp = head;
        vector<int>arr ;

        int pos=1;

        while(temp->next!=NULL ){
            if(prev!=NULL){
                if((temp->val > prev->val && temp->val > temp->next->val)
                    || (temp->val < prev->val && temp->val < temp->next->val)){
                        arr.push_back(pos);      
                }
            }
            prev = temp;
            temp = temp->next;
            pos++;
        }

        if(arr.size()<2){
            return {-1, -1};
        }
        int maxi = arr.back() - arr.front();
        int mini = INT_MAX;
        for(int i=1;i<arr.size();i++){
            mini = min(mini,(arr[i] - arr[i-1]));
        }
        return {mini, maxi} ;
    }
};
