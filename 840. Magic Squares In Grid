class Solution {
public:
    bool isMagic(int x, int y , vector<vector<int>>& grid){
        vector<int>count(10,0);
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                int num = grid[i+x][j+y];
                if(num<1 || num>9 || count[num]>0){
                    return false;;
                }
                count[num]++;
            }
        }
        int sum = grid[x][y] + grid[x][y+1] + grid[x][y+2];
        //checking for each row
        for(int i=0;i<3;i++){
            if(sum!= grid[i+x][y] + grid[i+x][y+1] + grid[i+x][y+2])
                return false;
        }
        //checking for each col
        for(int j=0;j<3;j++){
            if(sum!= grid[x][y+j] + grid[x+1][y+j] + grid[x+2][j+y])
                return false;
        }
        //checking for diagonal elements
        int diagonal1 = grid[x][y] + grid[x+1][y+1] + grid[x+2][y+2];
        int diagonal2 = grid[x][y+2] + grid[x+1][y+1] + grid[x+2][y];
        if(sum!= diagonal1 || sum!=diagonal2){
            return false;
        }
        return true;
    }
    int numMagicSquaresInside(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        if(row<3 || col<3) return 0;
        int cnt=0;

        for(int i=0;i<row-2;i++){
            for(int j=0;j<col-2;j++){
                if(isMagic(i,j,grid)) cnt++;
            }
        }
        return cnt;
    }
};
